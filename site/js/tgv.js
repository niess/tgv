// Generated by CoffeeScript 2.3.2
(function() {
  var UI, Viewer, app;

  Viewer = class Viewer {
    constructor() {
      void 0;
    }

    run() {
      var loader, renderer, scene, ui;
      // Create the ui
      ui = new UI;
      // Initialise the renderer
      renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setPixelRatio(window.devicePixelRatio ? window.devicePixelRatio : 1);
      document.body.appendChild(renderer.domElement);
      // Create the scene
      scene = new THREE.Scene;
      // Deferred configuration of the scene
      scene.unveil = function(scale) {
        var camera, controls, h, render, w;
        // Configure the lighting
        scene.add(new THREE.AmbientLight(0xffffff));
        // Add axes
        scene.add(new THREE.AxesHelper(0.05 * scale));
        // Create and initialise the camera
        [w, h] = [window.innerWidth, window.innerHeight];
        camera = new THREE.PerspectiveCamera(75, w / h, 1e-03 * scale, 10 * scale);
        camera.position.x = 0.5 * scale;
        camera.position.y = 0.5 * scale;
        camera.position.z = 0.5 * scale;
        // Set the camera controls
        controls = new THREE.TrackballControls(camera, renderer.domElement);
        controls.rotateSpeed = 3.0;
        controls.zoomSpeed = 0.5;
        // Return the rendering routine
        render = function() {
          requestAnimationFrame(render);
          renderer.render(scene, camera);
          controls.update();
          return ui.update();
        };
        return render;
      };
      // Load and render the GDML
      loader = new THREE.GDMLLoader;
      return loader.load("gdml/Phase-II-modDS.gdml", function(mesh, materials) {
        var render, scale;
        // Get the bounding sphere of the World volume
        mesh.geometry.computeBoundingSphere();
        scale = mesh.geometry.boundingSphere.radius;
        // Add the GDML objects to the scene
        scene.add(mesh);
        // Start the rendering loop
        render = scene.unveil(scale);
        return render();
      }, function(xhr) {
        return console.log(`${Math.round(xhr.loaded / xhr.total * 100)}% loaded`);
      }, function(err) {
        return console.log(err);
      });
    }

  };

  UI = class UI {
    constructor() {
      this.stats = new Stats;
      document.body.appendChild(this.stats.domElement);
    }

    update() {
      return this.stats.update();
    }

  };

  // Run the viewer
  app = new Viewer;

  app.run();

}).call(this);
